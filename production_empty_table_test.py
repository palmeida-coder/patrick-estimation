#!/usr/bin/env python3
"""
üö® DIAGNOSTIC URGENT - URL PRODUCTION ACCESSIBLE MAIS TABLEAU VIDE
Tests critiques pour diagnostiquer pourquoi le tableau est compl√®tement vide malgr√© l'interface qui se charge correctement
PROBL√àME URGENT: L'utilisateur montre que le tableau est compl√®tement vide malgr√© l'interface sidebar verticale parfaite
OBJECTIF: Identifier pourquoi fetchLeads() ne charge pas les donn√©es sur l'URL production accessible
URL PRODUCTION: https://realestate-leads-5.emergentagent.host/leads
"""

import requests
import sys
import json
from datetime import datetime
from typing import Dict, Any

class ProductionEmptyTableDiagnostic:
    def __init__(self):
        self.production_url = "https://realestate-leads-5.emergentagent.host"
        self.preview_url = "https://einstein-dashboard.preview.emergentagent.com"
        self.tests_run = 0
        self.tests_passed = 0
        self.results = {}

    def log_test(self, name: str, success: bool, details: str = ""):
        """Log test results"""
        self.tests_run += 1
        if success:
            self.tests_passed += 1
            print(f"‚úÖ {name} - PASSED {details}")
        else:
            print(f"‚ùå {name} - FAILED {details}")
        return success

    def make_request(self, base_url: str, method: str, endpoint: str, data: dict = None, expected_status: int = 200) -> tuple:
        """Make HTTP request and return success status and response"""
        url = f"{base_url}/{endpoint}"
        headers = {'Content-Type': 'application/json'}
        
        try:
            if method == 'GET':
                response = requests.get(url, headers=headers, timeout=15)
            elif method == 'POST':
                response = requests.post(url, json=data, headers=headers, timeout=15)
            else:
                return False, {}, f"Unsupported method: {method}"

            success = response.status_code == expected_status
            try:
                response_data = response.json()
            except:
                response_data = {"raw_response": response.text[:500]}
            
            status_info = f"(Status: {response.status_code}, Expected: {expected_status})"
            return success, response_data, status_info

        except requests.exceptions.RequestException as e:
            return False, {}, f"Request failed: {str(e)}"

    def test_production_api_backend(self):
        """üîç TESTER API BACKEND PRODUCTION - V√©rifier si l'API backend r√©pond sur cette URL production"""
        print("\nüîç √âTAPE 1: TESTER API BACKEND PRODUCTION")
        print(f"URL: {self.production_url}/api/leads")
        print("OBJECTIF: V√©rifier si l'API backend r√©pond correctement")
        print("=" * 80)
        
        success, response, details = self.make_request(self.production_url, 'GET', 'api/leads?limite=100', expected_status=200)
        
        if not success:
            self.results['production_api'] = {'accessible': False, 'error': details}
            return self.log_test("Production API Backend", False, f"API backend inaccessible: {details}")
        
        leads = response.get('leads', [])
        total_leads = response.get('total', 0)
        
        print(f"üìä R√âSULTATS API PRODUCTION:")
        print(f"   Total leads en base: {total_leads}")
        print(f"   Leads retourn√©s: {len(leads)}")
        print(f"   Structure r√©ponse: {list(response.keys())}")
        
        # Analyser les leads par source
        github_leads = [lead for lead in leads if lead.get('source') == 'estimation_email_externe']
        manual_leads = [lead for lead in leads if lead.get('source') != 'estimation_email_externe']
        
        print(f"   Leads GitHub (estimation_email_externe): {len(github_leads)}")
        print(f"   Autres leads: {len(manual_leads)}")
        
        # V√©rifier structure des leads
        if leads:
            first_lead = leads[0]
            print(f"   Structure lead: {list(first_lead.keys())}")
            print(f"   Exemple lead: {first_lead.get('pr√©nom', '')} {first_lead.get('nom', '')} - {first_lead.get('email', '')}")
        
        self.results['production_api'] = {
            'accessible': True,
            'total_leads': total_leads,
            'leads_returned': len(leads),
            'github_leads': len(github_leads),
            'manual_leads': len(manual_leads),
            'response_structure': list(response.keys()),
            'sample_leads': leads[:3] if leads else []
        }
        
        if total_leads == 0:
            return self.log_test("Production API Backend", False, f"Base de donn√©es production VIDE - 0 leads trouv√©s")
        else:
            return self.log_test("Production API Backend", True, f"API accessible avec {total_leads} leads en base")

    def test_production_vs_preview_comparison(self):
        """üîç COMPARER PRODUCTION VS PREVIEW - V√©rifier combien de leads en base production vs preview"""
        print("\nüîç √âTAPE 2: COMPARAISON PRODUCTION VS PREVIEW")
        print("OBJECTIF: Comparer le nombre de leads entre les deux environnements")
        print("=" * 80)
        
        # Test Preview
        print(f"üîç TEST PREVIEW: {self.preview_url}/api/leads")
        preview_success, preview_response, preview_details = self.make_request(
            self.preview_url, 'GET', 'api/leads?limite=100', expected_status=200
        )
        
        if preview_success:
            preview_leads = preview_response.get('leads', [])
            preview_total = preview_response.get('total', 0)
            preview_github = [lead for lead in preview_leads if lead.get('source') == 'estimation_email_externe']
            
            print(f"‚úÖ PREVIEW ACCESSIBLE:")
            print(f"   Total leads: {preview_total}")
            print(f"   Leads GitHub: {len(preview_github)}")
            
            self.results['preview_comparison'] = {
                'accessible': True,
                'total_leads': preview_total,
                'github_leads': len(preview_github)
            }
        else:
            print(f"‚ùå PREVIEW INACCESSIBLE: {preview_details}")
            self.results['preview_comparison'] = {'accessible': False, 'error': preview_details}
        
        # Comparaison
        production_total = self.results.get('production_api', {}).get('total_leads', 0)
        production_github = self.results.get('production_api', {}).get('github_leads', 0)
        
        print(f"\nüìä COMPARAISON CRITIQUE:")
        print(f"   PRODUCTION - Total: {production_total}, GitHub: {production_github}")
        if preview_success:
            print(f"   PREVIEW - Total: {preview_total}, GitHub: {len(preview_github)}")
            
            if preview_total > 0 and production_total == 0:
                print(f"üö® PROBL√àME IDENTIFI√â: Tous les leads sont en PREVIEW, base PRODUCTION vide")
                diagnosis = "LEADS_IN_PREVIEW_ONLY"
            elif production_total > 0 and preview_total > production_total:
                print(f"‚ö†Ô∏è PROBL√àME PARTIEL: Plus de leads en Preview qu'en Production")
                diagnosis = "MORE_LEADS_IN_PREVIEW"
            elif production_total > 0:
                print(f"‚úÖ PRODUCTION A DES LEADS: Probl√®me probablement c√¥t√© frontend")
                diagnosis = "PRODUCTION_HAS_LEADS"
            else:
                print(f"‚ùå AUCUN LEAD DANS LES DEUX ENVIRONNEMENTS")
                diagnosis = "NO_LEADS_ANYWHERE"
        else:
            diagnosis = "PREVIEW_INACCESSIBLE"
        
        self.results['diagnosis'] = diagnosis
        
        return self.log_test("Production vs Preview Comparison", True, f"Diagnostic: {diagnosis}")

    def test_production_form_endpoint(self):
        """üîç TESTER ENDPOINT FORMULAIRE PRODUCTION - Cr√©er un nouveau lead pour voir s'il appara√Æt"""
        print("\nüîç √âTAPE 3: TESTER ENDPOINT FORMULAIRE PRODUCTION")
        print(f"URL: {self.production_url}/api/estimation/submit-prospect-email")
        print("OBJECTIF: Cr√©er un nouveau lead et v√©rifier s'il appara√Æt dans la base")
        print("=" * 80)
        
        # Donn√©es test production selon la review request
        test_data = {
            "prenom": "Test",
            "nom": "ProductionEmpty",
            "email": "test.production.empty@example.com",
            "telephone": "06 99 88 77 55",
            "adresse": "Test Production Vide, Lyon",
            "ville": "Lyon",
            "code_postal": "69001",
            "type_bien": "Appartement",
            "surface": "75",
            "pieces": "3",
            "prix_souhaite": "350000"
        }
        
        print(f"üìù Cr√©ation lead test: {test_data['prenom']} {test_data['nom']}")
        print(f"üìß Email: {test_data['email']}")
        
        # Test cr√©ation lead
        success, response, details = self.make_request(
            self.production_url, 'POST', 'api/estimation/submit-prospect-email',
            data=test_data, expected_status=200
        )
        
        if not success:
            self.results['production_form'] = {'working': False, 'error': details}
            return self.log_test("Production Form Endpoint", False, f"Endpoint formulaire ne fonctionne pas: {details}")
        
        # V√©rifier r√©ponse
        if not response.get('success'):
            self.results['production_form'] = {'working': False, 'error': 'success=false'}
            return self.log_test("Production Form Endpoint", False, f"Formulaire retourne success=false")
        
        lead_id = response.get('lead_id')
        patrick_score = response.get('patrick_ai_score')
        tier = response.get('tier_classification')
        
        print(f"‚úÖ LEAD CR√â√â AVEC SUCC√àS:")
        print(f"   Lead ID: {lead_id}")
        print(f"   Patrick AI Score: {patrick_score}")
        print(f"   Tier: {tier}")
        
        # V√©rifier que le lead est accessible
        if lead_id:
            verify_success, verify_response, verify_details = self.make_request(
                self.production_url, 'GET', f'api/leads/{lead_id}', expected_status=200
            )
            
            if verify_success:
                print(f"‚úÖ LEAD V√âRIFIABLE EN BASE: {verify_response.get('email')}")
                
                # V√©rifier qu'il appara√Æt dans la liste
                list_success, list_response, list_details = self.make_request(
                    self.production_url, 'GET', 'api/leads?limite=10', expected_status=200
                )
                
                if list_success:
                    leads = list_response.get('leads', [])
                    test_lead_found = any(lead.get('id') == lead_id for lead in leads)
                    
                    if test_lead_found:
                        print(f"‚úÖ LEAD APPARA√éT DANS LA LISTE DES LEADS")
                        self.results['production_form'] = {
                            'working': True,
                            'lead_created': True,
                            'lead_in_list': True,
                            'lead_id': lead_id
                        }
                        return self.log_test("Production Form Endpoint", True, 
                                           f"Formulaire fonctionne, lead cr√©√© et visible dans la liste")
                    else:
                        print(f"‚ö†Ô∏è LEAD CR√â√â MAIS N'APPARA√éT PAS DANS LA LISTE")
                        self.results['production_form'] = {
                            'working': True,
                            'lead_created': True,
                            'lead_in_list': False,
                            'lead_id': lead_id
                        }
                        return self.log_test("Production Form Endpoint", False, 
                                           f"Lead cr√©√© mais n'appara√Æt pas dans la liste - probl√®me de synchronisation")
                else:
                    print(f"‚ùå IMPOSSIBLE DE V√âRIFIER LA LISTE DES LEADS")
                    self.results['production_form'] = {
                        'working': True,
                        'lead_created': True,
                        'lead_in_list': None,
                        'list_error': list_details
                    }
                    return self.log_test("Production Form Endpoint", False, 
                                       f"Lead cr√©√© mais impossible de v√©rifier la liste: {list_details}")
            else:
                print(f"‚ùå LEAD CR√â√â MAIS NON V√âRIFIABLE: {verify_details}")
                self.results['production_form'] = {
                    'working': True,
                    'lead_created': False,
                    'verify_error': verify_details
                }
                return self.log_test("Production Form Endpoint", False, 
                                   f"Lead cr√©√© mais non v√©rifiable: {verify_details}")
        else:
            self.results['production_form'] = {
                'working': True,
                'lead_created': False,
                'error': 'no_lead_id'
            }
            return self.log_test("Production Form Endpoint", False, 
                               f"Formulaire fonctionne mais aucun lead_id retourn√©")

    def test_frontend_api_calls_diagnostic(self):
        """üîç DIAGNOSTIC FRONTEND - Analyser pourquoi fetchLeads() ne charge pas les donn√©es"""
        print("\nüîç √âTAPE 4: DIAGNOSTIC FRONTEND API CALLS")
        print("OBJECTIF: V√©rifier si le probl√®me vient des appels API frontend")
        print("=" * 80)
        
        # Test diff√©rents endpoints que le frontend pourrait utiliser
        endpoints_to_test = [
            'api/leads',
            'api/leads?limite=50',
            'api/leads?page=1&limite=50',
            'api/analytics/dashboard'
        ]
        
        frontend_results = {}
        
        for endpoint in endpoints_to_test:
            print(f"\nüîç Test endpoint: {endpoint}")
            success, response, details = self.make_request(
                self.production_url, 'GET', endpoint, expected_status=200
            )
            
            if success:
                if 'leads' in response:
                    leads_count = len(response.get('leads', []))
                    total = response.get('total', 0)
                    print(f"   ‚úÖ Accessible - {leads_count} leads retourn√©s, {total} total")
                    frontend_results[endpoint] = {
                        'accessible': True,
                        'leads_returned': leads_count,
                        'total': total
                    }
                else:
                    print(f"   ‚úÖ Accessible - R√©ponse: {list(response.keys())}")
                    frontend_results[endpoint] = {
                        'accessible': True,
                        'response_keys': list(response.keys())
                    }
            else:
                print(f"   ‚ùå Inaccessible - {details}")
                frontend_results[endpoint] = {
                    'accessible': False,
                    'error': details
                }
        
        # Test avec diff√©rents param√®tres de pagination
        pagination_tests = [
            'api/leads?page=1&limite=10',
            'api/leads?page=1&limite=100',
            'api/leads?limite=1000'
        ]
        
        print(f"\nüîç Tests pagination:")
        for endpoint in pagination_tests:
            success, response, details = self.make_request(
                self.production_url, 'GET', endpoint, expected_status=200
            )
            
            if success:
                leads_count = len(response.get('leads', []))
                total = response.get('total', 0)
                pages = response.get('pages', 0)
                print(f"   {endpoint}: {leads_count} leads, {total} total, {pages} pages")
                frontend_results[f"pagination_{endpoint}"] = {
                    'leads_returned': leads_count,
                    'total': total,
                    'pages': pages
                }
            else:
                print(f"   {endpoint}: ERREUR - {details}")
        
        self.results['frontend_diagnostic'] = frontend_results
        
        # Analyser les r√©sultats
        basic_leads_working = frontend_results.get('api/leads', {}).get('accessible', False)
        has_leads = any(
            result.get('total', 0) > 0 or result.get('leads_returned', 0) > 0 
            for result in frontend_results.values() 
            if isinstance(result, dict)
        )
        
        if basic_leads_working and has_leads:
            return self.log_test("Frontend API Calls Diagnostic", True, 
                               f"APIs accessibles avec des leads - probl√®me probablement c√¥t√© frontend JavaScript")
        elif basic_leads_working and not has_leads:
            return self.log_test("Frontend API Calls Diagnostic", False, 
                               f"APIs accessibles mais aucun lead retourn√© - base de donn√©es vide")
        else:
            return self.log_test("Frontend API Calls Diagnostic", False, 
                               f"APIs inaccessibles - probl√®me backend")

    def analyze_empty_table_root_cause(self):
        """üéØ ANALYSE FINALE - Identifier la cause racine du tableau vide"""
        print("\n" + "=" * 80)
        print("üéØ ANALYSE FINALE - CAUSE RACINE TABLEAU VIDE")
        print("=" * 80)
        
        production_api_working = self.results.get('production_api', {}).get('accessible', False)
        production_has_leads = self.results.get('production_api', {}).get('total_leads', 0) > 0
        form_working = self.results.get('production_form', {}).get('working', False)
        diagnosis = self.results.get('diagnosis', 'UNKNOWN')
        
        print(f"üìä R√âSULTATS DIAGNOSTIC:")
        print(f"   API Production accessible: {'‚úÖ' if production_api_working else '‚ùå'}")
        print(f"   Production a des leads: {'‚úÖ' if production_has_leads else '‚ùå'}")
        print(f"   Formulaire fonctionne: {'‚úÖ' if form_working else '‚ùå'}")
        print(f"   Diagnostic: {diagnosis}")
        
        # D√©terminer la cause racine
        if not production_api_working:
            root_cause = "API_BACKEND_INACCESSIBLE"
            print(f"\nüö® CAUSE RACINE: API BACKEND INACCESSIBLE")
            print(f"   Le backend ne r√©pond pas sur l'URL production")
            print(f"   L'interface se charge mais ne peut pas r√©cup√©rer les donn√©es")
            
        elif production_has_leads and production_api_working:
            root_cause = "FRONTEND_JAVASCRIPT_ISSUE"
            print(f"\nüö® CAUSE RACINE: PROBL√àME FRONTEND JAVASCRIPT")
            print(f"   Le backend fonctionne et a des leads")
            print(f"   Le probl√®me vient du code JavaScript frontend (fetchLeads())")
            print(f"   Possible: mauvaise URL API, erreur JavaScript, probl√®me CORS")
            
        elif not production_has_leads and diagnosis == "LEADS_IN_PREVIEW_ONLY":
            root_cause = "DATABASE_PRODUCTION_EMPTY"
            print(f"\nüö® CAUSE RACINE: BASE DE DONN√âES PRODUCTION VIDE")
            print(f"   Tous les leads sont en environnement Preview")
            print(f"   La base de donn√©es Production est vide")
            print(f"   Le formulaire GitHub pointe vers Preview au lieu de Production")
            
        elif not production_has_leads and form_working:
            root_cause = "FRESH_PRODUCTION_ENVIRONMENT"
            print(f"\nüö® CAUSE RACINE: ENVIRONNEMENT PRODUCTION NEUF")
            print(f"   L'environnement Production est neuf et vide")
            print(f"   Le formulaire fonctionne mais aucun lead historique")
            print(f"   Besoin de migration des leads depuis Preview")
            
        else:
            root_cause = "MULTIPLE_ISSUES"
            print(f"\nüö® CAUSE RACINE: PROBL√àMES MULTIPLES")
            print(f"   Combinaison de probl√®mes backend et frontend")
            
        # Recommandations sp√©cifiques
        print(f"\nüìã ACTIONS CRITIQUES √Ä EFFECTUER:")
        
        if root_cause == "API_BACKEND_INACCESSIBLE":
            print(f"1. üö® URGENT: V√©rifier que le backend tourne sur l'URL production")
            print(f"2. üîß Contr√¥ler la configuration DNS et routing")
            print(f"3. üîç V√©rifier les logs du serveur backend")
            print(f"4. üîß Tester la connectivit√© r√©seau")
            
        elif root_cause == "FRONTEND_JAVASCRIPT_ISSUE":
            print(f"1. üîç V√©rifier l'URL API dans le code frontend")
            print(f"2. üîß Contr√¥ler la variable REACT_APP_BACKEND_URL")
            print(f"3. üîç V√©rifier les erreurs JavaScript dans la console")
            print(f"4. üîß Tester les appels API depuis la console navigateur")
            print(f"5. üîç V√©rifier la configuration CORS")
            
        elif root_cause == "DATABASE_PRODUCTION_EMPTY":
            print(f"1. üîÑ URGENT: Migrer les leads de Preview vers Production")
            print(f"2. üîß Modifier l'URL du formulaire GitHub vers Production")
            print(f"3. ‚úÖ Tester le workflow complet apr√®s migration")
            print(f"4. üîç V√©rifier que les nouveaux leads arrivent en Production")
            
        elif root_cause == "FRESH_PRODUCTION_ENVIRONMENT":
            print(f"1. üîÑ Migrer les leads historiques depuis Preview")
            print(f"2. üîß Configurer le formulaire GitHub vers Production")
            print(f"3. ‚úÖ Tester la cr√©ation de nouveaux leads")
            print(f"4. üìä V√©rifier que le dashboard se remplit")
            
        else:
            print(f"1. üîç Diagnostic approfondi n√©cessaire")
            print(f"2. üîß V√©rifier chaque composant individuellement")
            print(f"3. üìû Contacter le support technique")
        
        return root_cause

    def run_production_empty_diagnostic(self):
        """Ex√©cuter le diagnostic complet du tableau vide en production"""
        print("üö® DIAGNOSTIC URGENT - URL PRODUCTION ACCESSIBLE MAIS TABLEAU VIDE")
        print("=" * 80)
        print("PROBL√àME CRITIQUE: L'interface sidebar verticale se charge parfaitement")
        print("mais le tableau est compl√®tement vide - aucun lead affich√©")
        print("URL PRODUCTION: https://realestate-leads-5.emergentagent.host/leads")
        print("=" * 80)
        
        # Ex√©cuter tous les tests
        self.test_production_api_backend()
        self.test_production_vs_preview_comparison()
        self.test_production_form_endpoint()
        self.test_frontend_api_calls_diagnostic()
        
        # Analyse finale
        root_cause = self.analyze_empty_table_root_cause()
        
        # R√©sum√© final
        print(f"\n" + "=" * 80)
        print("üìä R√âSUM√â EX√âCUTIF - DIAGNOSTIC TABLEAU VIDE")
        print("=" * 80)
        print(f"Tests ex√©cut√©s: {self.tests_run}")
        print(f"Tests r√©ussis: {self.tests_passed}")
        print(f"Taux de succ√®s: {(self.tests_passed/self.tests_run*100):.1f}%")
        print(f"Cause racine identifi√©e: {root_cause}")
        
        return {
            'tests_run': self.tests_run,
            'tests_passed': self.tests_passed,
            'success_rate': (self.tests_passed/self.tests_run*100) if self.tests_run > 0 else 0,
            'root_cause': root_cause,
            'results': self.results
        }


if __name__ == "__main__":
    print("üö® D√âMARRAGE DIAGNOSTIC URGENT - TABLEAU VIDE PRODUCTION")
    print("=" * 80)
    
    # Cr√©er et ex√©cuter le diagnostic
    diagnostic = ProductionEmptyTableDiagnostic()
    results = diagnostic.run_production_empty_diagnostic()
    
    print(f"\nüéØ DIAGNOSTIC TERMIN√â")
    print(f"Cause racine: {results['root_cause']}")
    print(f"Taux de succ√®s: {results['success_rate']:.1f}%")
    
    # Exit code bas√© sur les r√©sultats
    if results['root_cause'] in ['FRONTEND_JAVASCRIPT_ISSUE', 'DATABASE_PRODUCTION_EMPTY']:
        sys.exit(0)  # Probl√®me identifi√© avec solution claire
    else:
        sys.exit(1)  # Probl√®me critique n√©cessitant intervention