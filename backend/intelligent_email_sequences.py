#!/usr/bin/env python3
"""
Intelligent Email Sequences & Nurturing Automation - R√âVOLUTIONNAIRE
S√©quences d'emails personnalis√©es pilot√©es par Patrick IA 2.0
Nurturing automation bas√© sur comportement et scoring des leads
"""

import logging
import asyncio
import uuid
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional
from enum import Enum
import json
from motor.motor_asyncio import AsyncIOMotorDatabase

# Imports des services existants
from email_automation import EmailAutomationService, EmailTemplate, EmailStatus
from ai_behavioral_service import AIBehavioralService
from enhanced_behavioral_ai import EnhancedBehavioralAI
from notification_service import NotificationService, NotificationType, NotificationPriority

logger = logging.getLogger(__name__)

class SequenceType(Enum):
    """Types de s√©quences d'emails"""
    ONBOARDING = "onboarding"              # S√©quence d'accueil nouveaux leads
    NURTURING_COLD = "nurturing_cold"      # Nurturing leads froids  
    NURTURING_WARM = "nurturing_warm"      # Nurturing leads chauds
    REACTIVATION = "reactivation"          # R√©activation leads inactifs
    PRE_CONVERSION = "pre_conversion"      # Pr√©-conversion leads qualifi√©s
    POST_ESTIMATION = "post_estimation"    # Suivi apr√®s estimation
    BEHAVIORAL_TRIGGER = "behavioral"      # D√©clench√©es par comportement
    SEASONAL_CAMPAIGN = "seasonal"         # Campagnes saisonni√®res

class SequenceStatus(Enum):
    """√âtats des s√©quences"""
    ACTIVE = "active"
    PAUSED = "paused"
    COMPLETED = "completed"
    CANCELLED = "cancelled"

class TriggerCondition(Enum):
    """Conditions de d√©clenchement"""
    LEAD_CREATED = "lead_created"
    SCORE_THRESHOLD = "score_threshold"
    INACTIVITY_PERIOD = "inactivity_period"
    BEHAVIORAL_SIGNAL = "behavioral_signal"
    DATE_TRIGGER = "date_trigger"
    MANUAL_TRIGGER = "manual_trigger"
    AI_RECOMMENDATION = "ai_recommendation"

class IntelligentEmailSequenceService:
    """Service de s√©quences d'emails intelligentes"""
    
    def __init__(self, db: AsyncIOMotorDatabase, 
                 email_service: EmailAutomationService,
                 ai_service: EnhancedBehavioralAI,
                 notification_service: NotificationService):
        self.db = db
        self.email_service = email_service
        self.ai_service = ai_service
        self.notification_service = notification_service
        self.logger = logging.getLogger(__name__)
        
        # D√©finition des s√©quences pr√©d√©finies
        self.sequence_templates = self._initialize_sequence_templates()
        
        # Configuration des d√©clencheurs automatiques
        self.trigger_config = self._initialize_trigger_config()
        
        # √âtat du processeur de s√©quences
        self.is_processing = False
    
    def _initialize_sequence_templates(self) -> Dict[SequenceType, Dict]:
        """Initialise les templates de s√©quences pr√©d√©finis"""
        
        return {
            SequenceType.ONBOARDING: {
                "name": "Accueil Nouveaux Prospects",
                "description": "S√©quence d'accueil automatique pour nouveaux leads",
                "duration_days": 14,
                "emails": [
                    {
                        "day": 0,
                        "template": EmailTemplate.PREMIER_CONTACT,
                        "subject_template": "üè† Bienvenue {pr√©nom} - Votre projet immobilier commence ici",
                        "personalization_level": "high",
                        "ai_optimization": True
                    },
                    {
                        "day": 3,
                        "template": EmailTemplate.RELANCE_J3,
                        "subject_template": "üìà {pr√©nom}, optimisons la valorisation de votre bien",
                        "personalization_level": "medium",
                        "ai_optimization": True,
                        "condition": "no_response"
                    },
                    {
                        "day": 7,
                        "template": EmailTemplate.ESTIMATION_GRATUITE,
                        "subject_template": "üéØ Estimation gratuite pour votre bien √† {ville}",
                        "personalization_level": "high",
                        "ai_optimization": True,
                        "condition": "score_above_50"
                    },
                    {
                        "day": 14,
                        "template": EmailTemplate.INVITATION_VISITE,
                        "subject_template": "üîë Derni√®re chance - Visite gratuite √† {ville}",
                        "personalization_level": "high",
                        "ai_optimization": True,
                        "condition": "no_conversion"
                    }
                ],
                "exit_conditions": ["lead_converted", "lead_unsubscribed", "lead_responded"]
            },
            
            SequenceType.NURTURING_WARM: {
                "name": "Nurturing Prospects Chauds",
                "description": "Accompagnement personnalis√© leads haute qualit√©",
                "duration_days": 30,
                "emails": [
                    {
                        "day": 0,
                        "template": EmailTemplate.ESTIMATION_GRATUITE,
                        "subject_template": "üöÄ {pr√©nom}, votre bien vaut plus que vous pensez",
                        "personalization_level": "very_high",
                        "ai_optimization": True
                    },
                    {
                        "day": 5,
                        "template": EmailTemplate.INVITATION_VISITE,
                        "subject_template": "‚≠ê Visite exclusive - Maximisez votre vente",
                        "personalization_level": "very_high",
                        "ai_optimization": True
                    },
                    {
                        "day": 12,
                        "template": EmailTemplate.SUIVI_POST_CONTACT,
                        "subject_template": "üí° Conseils experts pour votre vente √† {ville}",
                        "personalization_level": "high",
                        "ai_optimization": True
                    },
                    {
                        "day": 20,
                        "template": EmailTemplate.RELANCE_J15,
                        "subject_template": "üéØ {pr√©nom}, le march√© √©volue - Agissons ensemble",
                        "personalization_level": "high",
                        "ai_optimization": True
                    }
                ],
                "exit_conditions": ["lead_converted", "score_below_60", "no_engagement_15days"]
            },
            
            SequenceType.REACTIVATION: {
                "name": "R√©activation Leads Dormants",
                "description": "R√©veil des prospects inactifs avec nouvelles approches",
                "duration_days": 21,
                "emails": [
                    {
                        "day": 0,
                        "template": EmailTemplate.PREMIER_CONTACT,
                        "subject_template": "üîÑ {pr√©nom}, votre projet immobilier - O√π en √™tes-vous ?",
                        "personalization_level": "medium",
                        "ai_optimization": True
                    },
                    {
                        "day": 7,
                        "template": EmailTemplate.ESTIMATION_GRATUITE,
                        "subject_template": "üìä Nouvelle √©valuation gratuite de votre bien",
                        "personalization_level": "medium",
                        "ai_optimization": True
                    },
                    {
                        "day": 15,
                        "template": EmailTemplate.INVITATION_VISITE,
                        "subject_template": "üè† Derni√®re opportunit√© - Consultation gratuite",
                        "personalization_level": "low",
                        "ai_optimization": False
                    }
                ],
                "exit_conditions": ["lead_engaged", "lead_unsubscribed"]
            },
            
            SequenceType.BEHAVIORAL_TRIGGER: {
                "name": "D√©clenchement Comportemental",
                "description": "R√©actions automatiques aux signaux comportementaux IA",
                "duration_days": 7,
                "emails": [
                    {
                        "day": 0,
                        "template": EmailTemplate.SUIVI_POST_CONTACT,
                        "subject_template": "üéØ {pr√©nom}, Patrick IA d√©tecte votre intention de vente",
                        "personalization_level": "very_high",
                        "ai_optimization": True,
                        "dynamic_content": True
                    },
                    {
                        "day": 3,
                        "template": EmailTemplate.ESTIMATION_GRATUITE,
                        "subject_template": "‚ö° Action imm√©diate recommand√©e pour votre bien",
                        "personalization_level": "very_high",
                        "ai_optimization": True,
                        "dynamic_content": True
                    }
                ],
                "exit_conditions": ["immediate_response", "lead_converted"]
            }
        }
    
    def _initialize_trigger_config(self) -> Dict[TriggerCondition, Dict]:
        """Configuration des d√©clencheurs automatiques"""
        
        return {
            TriggerCondition.LEAD_CREATED: {
                "sequence": SequenceType.ONBOARDING,
                "delay_hours": 1,
                "conditions": {"source": "any"}
            },
            TriggerCondition.SCORE_THRESHOLD: {
                "sequence": SequenceType.NURTURING_WARM,
                "delay_hours": 2,
                "conditions": {"score_above": 75}
            },
            TriggerCondition.INACTIVITY_PERIOD: {
                "sequence": SequenceType.REACTIVATION,
                "delay_hours": 0,
                "conditions": {"inactive_days": 30}
            },
            TriggerCondition.BEHAVIORAL_SIGNAL: {
                "sequence": SequenceType.BEHAVIORAL_TRIGGER,
                "delay_hours": 0,
                "conditions": {"ai_signal": "urgent_intent"}
            }
        }
    
    async def start_sequence(self, lead_id: str, sequence_type: SequenceType, 
                           trigger_data: Dict = None) -> Dict[str, Any]:
        """D√©marre une s√©quence d'emails pour un lead"""
        
        try:
            # R√©cup√©rer le lead
            lead = await self.db.leads.find_one({"id": lead_id}, {"_id": 0})
            if not lead:
                raise ValueError(f"Lead {lead_id} non trouv√©")
            
            # V√©rifier si le lead n'est pas d√©j√† dans une s√©quence active du m√™me type
            existing_sequence = await self.db.email_sequences.find_one({
                "lead_id": lead_id,
                "sequence_type": sequence_type.value,
                "status": SequenceStatus.ACTIVE.value
            })
            
            if existing_sequence:
                return {
                    "status": "skipped",
                    "reason": f"Lead d√©j√† dans s√©quence {sequence_type.value}",
                    "existing_sequence_id": existing_sequence["id"]
                }
            
            # Obtenir template de s√©quence
            template = self.sequence_templates.get(sequence_type)
            if not template:
                raise ValueError(f"Template s√©quence {sequence_type.value} non trouv√©")
            
            # Analyser le lead avec Patrick IA pour personnalisation
            ai_analysis = await self.ai_service.analyze_lead_behavior(lead)
            
            # Cr√©er la s√©quence
            sequence_id = str(uuid.uuid4())
            sequence = {
                "id": sequence_id,
                "lead_id": lead_id,
                "sequence_type": sequence_type.value,
                "status": SequenceStatus.ACTIVE.value,
                "template_name": template["name"],
                "started_at": datetime.now().isoformat(),
                "current_step": 0,
                "total_steps": len(template["emails"]),
                "ai_analysis": ai_analysis,
                "trigger_data": trigger_data or {},
                "personalization_data": await self._generate_personalization_data(lead, ai_analysis),
                "scheduled_emails": [],
                "sent_emails": [],
                "performance_metrics": {
                    "emails_sent": 0,
                    "emails_opened": 0,
                    "emails_clicked": 0,
                    "responses_received": 0,
                    "conversion_achieved": False
                }
            }
            
            # Programmer les emails de la s√©quence
            scheduled_emails = await self._schedule_sequence_emails(sequence, template, lead)
            sequence["scheduled_emails"] = scheduled_emails
            
            # Sauvegarder la s√©quence
            await self.db.email_sequences.insert_one(sequence)
            
            # Notifier le d√©marrage
            await self.notification_service.send_notification(
                NotificationType.SYSTEM_ALERT,
                NotificationPriority.LOW,
                {
                    "message": f"S√©quence '{template['name']}' d√©marr√©e pour {lead.get('pr√©nom', '')} {lead.get('nom', '')}",
                    "sequence_id": sequence_id,
                    "lead_name": f"{lead.get('pr√©nom', '')} {lead.get('nom', '')}",
                    "emails_planned": len(scheduled_emails)
                }
            )
            
            self.logger.info(f"‚úÖ S√©quence {sequence_type.value} d√©marr√©e pour lead {lead_id}")
            
            return {
                "status": "started",
                "sequence_id": sequence_id,
                "emails_scheduled": len(scheduled_emails),
                "first_email_at": scheduled_emails[0]["scheduled_at"] if scheduled_emails else None
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur d√©marrage s√©quence: {str(e)}")
            return {"status": "error", "error": str(e)}
    
    async def _schedule_sequence_emails(self, sequence: Dict, template: Dict, lead: Dict) -> List[Dict]:
        """Programme tous les emails d'une s√©quence"""
        
        scheduled_emails = []
        start_date = datetime.now()
        
        for i, email_config in enumerate(template["emails"]):
            # Calculer la date d'envoi
            send_date = start_date + timedelta(days=email_config["day"])
            
            # V√©rifier les conditions
            if await self._check_email_conditions(email_config, lead, sequence):
                email_schedule = {
                    "step": i + 1,
                    "email_id": str(uuid.uuid4()),
                    "template": email_config["template"].value,
                    "subject_template": email_config["subject_template"],
                    "scheduled_at": send_date.isoformat(),
                    "personalization_level": email_config["personalization_level"],
                    "ai_optimization": email_config.get("ai_optimization", False),
                    "dynamic_content": email_config.get("dynamic_content", False),
                    "conditions": email_config.get("condition", "none"),
                    "status": "scheduled"
                }
                
                scheduled_emails.append(email_schedule)
        
        return scheduled_emails
    
    async def _check_email_conditions(self, email_config: Dict, lead: Dict, sequence: Dict) -> bool:
        """V√©rifie si les conditions pour envoyer un email sont remplies"""
        
        condition = email_config.get("condition")
        if not condition or condition == "none":
            return True
        
        if condition == "no_response":
            # V√©rifier si pas de r√©ponse aux emails pr√©c√©dents
            return len(sequence.get("sent_emails", [])) == 0 or not any(
                email.get("response_received") for email in sequence.get("sent_emails", [])
            )
        
        elif condition == "score_above_50":
            score = lead.get("score_qualification", 0)
            return int(score) > 50 if score else False
        
        elif condition == "score_above_60":
            score = lead.get("score_qualification", 0)
            return int(score) > 60 if score else False
        
        elif condition == "no_conversion":
            return lead.get("statut") not in ["converti", "rdv_planifi√©"]
        
        return True
    
    async def _generate_personalization_data(self, lead: Dict, ai_analysis: Dict) -> Dict:
        """G√©n√®re les donn√©es de personnalisation pour les emails"""
        
        personalization = {
            "pr√©nom": lead.get("pr√©nom", ""),
            "nom": lead.get("nom", ""),
            "ville": lead.get("ville", "Lyon"),
            "code_postal": lead.get("code_postal", ""),
            "type_bien": lead.get("type_propriete", "bien"),
            "score": lead.get("score_qualification", 50),
            "valeur_estim√©e": lead.get("valeur_estim√©e", 0),
            
            # Donn√©es IA
            "profil_type": ai_analysis.get("profil_type", "Standard"),
            "intention_vente": ai_analysis.get("intention_vente", "6_mois"),
            "approche_optimale": ai_analysis.get("optimal_approach", "Contact personnalis√©"),
            "points_forts": ai_analysis.get("points_forts", []),
            "recommandations_ia": ai_analysis.get("recommandations", []),
            
            # Donn√©es comportementales
            "derni√®re_activit√©": lead.get("derni√®re_activit√©", datetime.now().isoformat()),
            "source_lead": lead.get("source", "manuel"),
            "engagement_score": ai_analysis.get("engagement_score", 0.5)
        }
        
        return personalization
    
    async def process_scheduled_sequences(self):
        """Traite les s√©quences programm√©es - √Ä appeler p√©riodiquement"""
        
        if self.is_processing:
            return
        
        self.is_processing = True
        
        try:
            # R√©cup√©rer tous les emails √† envoyer maintenant
            current_time = datetime.now()
            
            sequences = await self.db.email_sequences.find({
                "status": SequenceStatus.ACTIVE.value,
                "scheduled_emails": {
                    "$elemMatch": {
                        "status": "scheduled",
                        "scheduled_at": {"$lte": current_time.isoformat()}
                    }
                }
            }).to_list(length=None)
            
            for sequence in sequences:
                await self._process_sequence_emails(sequence, current_time)
                
                # V√©rifier si s√©quence termin√©e
                if await self._is_sequence_completed(sequence):
                    await self._complete_sequence(sequence)
                
                # D√©lai entre traitements
                await asyncio.sleep(1)
            
            self.logger.info(f"‚úÖ Traitement s√©quences termin√©: {len(sequences)} s√©quences trait√©es")
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur traitement s√©quences: {str(e)}")
        
        finally:
            self.is_processing = False
    
    async def _process_sequence_emails(self, sequence: Dict, current_time: datetime):
        """Traite les emails d'une s√©quence sp√©cifique"""
        
        sequence_id = sequence["id"]
        lead_id = sequence["lead_id"]
        
        # R√©cup√©rer le lead actuel
        lead = await self.db.leads.find_one({"id": lead_id}, {"_id": 0})
        if not lead:
            await self._cancel_sequence(sequence_id, "Lead non trouv√©")
            return
        
        # Traiter chaque email programm√©
        for email in sequence["scheduled_emails"]:
            if (email["status"] == "scheduled" and 
                datetime.fromisoformat(email["scheduled_at"]) <= current_time):
                
                # V√©rifier les conditions de sortie
                if await self._check_exit_conditions(sequence, lead):
                    await self._complete_sequence(sequence)
                    return
                
                # Envoyer l'email
                await self._send_sequence_email(sequence, email, lead)
    
    async def _send_sequence_email(self, sequence: Dict, email_config: Dict, lead: Dict):
        """Envoie un email d'une s√©quence"""
        
        try:
            # Personnaliser le contenu avec IA si activ√©
            if email_config.get("ai_optimization"):
                subject = await self._personalize_with_ai(
                    email_config["subject_template"], 
                    sequence["personalization_data"],
                    sequence["ai_analysis"]
                )
            else:
                subject = email_config["subject_template"].format(**sequence["personalization_data"])
            
            # Programmer l'email via le service existant
            result = await self.email_service.schedule_email(
                lead_id=lead["id"],
                template=EmailTemplate(email_config["template"]),
                subject_override=subject,
                send_at=datetime.now(),  # Envoyer imm√©diatement
                personalization_data=sequence["personalization_data"]
            )
            
            # Mettre √† jour le statut de l'email
            await self.db.email_sequences.update_one(
                {"id": sequence["id"], "scheduled_emails.email_id": email_config["email_id"]},
                {
                    "$set": {
                        "scheduled_emails.$.status": "sent",
                        "scheduled_emails.$.sent_at": datetime.now().isoformat(),
                        "scheduled_emails.$.email_result": result
                    },
                    "$inc": {"performance_metrics.emails_sent": 1}
                }
            )
            
            # Ajouter √† l'historique
            await self.db.email_sequences.update_one(
                {"id": sequence["id"]},
                {
                    "$push": {
                        "sent_emails": {
                            "email_id": email_config["email_id"],
                            "sent_at": datetime.now().isoformat(),
                            "subject": subject,
                            "template": email_config["template"],
                            "result": result
                        }
                    }
                }
            )
            
            self.logger.info(f"‚úÖ Email s√©quence envoy√©: {email_config['template']} -> {lead['id']}")
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur envoi email s√©quence: {str(e)}")
            
            # Marquer l'email comme √©chou√©
            await self.db.email_sequences.update_one(
                {"id": sequence["id"], "scheduled_emails.email_id": email_config["email_id"]},
                {
                    "$set": {
                        "scheduled_emails.$.status": "failed",
                        "scheduled_emails.$.error": str(e)
                    }
                }
            )
    
    async def _personalize_with_ai(self, template: str, personalization_data: Dict, ai_analysis: Dict) -> str:
        """Personnalise un template avec l'IA"""
        
        try:
            # Utiliser Patrick IA pour am√©liorer le sujet
            enhanced_subject = template.format(**personalization_data)
            
            # Ajouter des √©l√©ments IA si pertinents
            if ai_analysis.get("urgence_score", 0) > 0.8:
                enhanced_subject = "üö® " + enhanced_subject
            elif ai_analysis.get("potentiel_score", 0) > 0.8:
                enhanced_subject = "‚≠ê " + enhanced_subject
            
            return enhanced_subject
            
        except Exception as e:
            self.logger.warning(f"Erreur personnalisation IA: {str(e)}")
            return template.format(**personalization_data)
    
    async def _check_exit_conditions(self, sequence: Dict, lead: Dict) -> bool:
        """V√©rifie les conditions de sortie d'une s√©quence"""
        
        template = self.sequence_templates.get(SequenceType(sequence["sequence_type"]))
        if not template:
            return False
        
        exit_conditions = template.get("exit_conditions", [])
        
        for condition in exit_conditions:
            if condition == "lead_converted" and lead.get("statut") in ["converti", "rdv_planifi√©"]:
                return True
            elif condition == "lead_unsubscribed" and lead.get("unsubscribed"):
                return True
            elif condition == "lead_responded" and sequence["performance_metrics"]["responses_received"] > 0:
                return True
            elif condition == "score_below_60" and lead.get("score_qualification", 100) < 60:
                return True
        
        return False
    
    async def _is_sequence_completed(self, sequence: Dict) -> bool:
        """V√©rifie si une s√©quence est termin√©e"""
        
        scheduled_emails = sequence.get("scheduled_emails", [])
        
        # V√©rifier si tous les emails ont √©t√© trait√©s
        for email in scheduled_emails:
            if email["status"] == "scheduled":
                return False
        
        return True
    
    async def _complete_sequence(self, sequence: Dict):
        """Termine une s√©quence"""
        
        sequence_id = sequence["id"]
        
        await self.db.email_sequences.update_one(
            {"id": sequence_id},
            {
                "$set": {
                    "status": SequenceStatus.COMPLETED.value,
                    "completed_at": datetime.now().isoformat()
                }
            }
        )
        
        # Notifier la fin
        await self.notification_service.send_notification(
            NotificationType.SYSTEM_ALERT,
            NotificationPriority.LOW,
            {
                "message": f"S√©quence email termin√©e",
                "sequence_id": sequence_id,
                "emails_sent": sequence["performance_metrics"]["emails_sent"],
                "performance": sequence["performance_metrics"]
            }
        )
        
        self.logger.info(f"‚úÖ S√©quence {sequence_id} termin√©e")
    
    async def _cancel_sequence(self, sequence_id: str, reason: str):
        """Annule une s√©quence"""
        
        await self.db.email_sequences.update_one(
            {"id": sequence_id},
            {
                "$set": {
                    "status": SequenceStatus.CANCELLED.value,
                    "cancelled_at": datetime.now().isoformat(),
                    "cancellation_reason": reason
                }
            }
        )
        
        self.logger.info(f"‚èπÔ∏è S√©quence {sequence_id} annul√©e: {reason}")
    
    # API Methods pour gestion des s√©quences
    
    async def get_sequence_stats(self) -> Dict[str, Any]:
        """R√©cup√®re les statistiques des s√©quences"""
        
        try:
            # Statistiques g√©n√©rales
            total_sequences = await self.db.email_sequences.count_documents({})
            active_sequences = await self.db.email_sequences.count_documents({"status": "active"})
            completed_sequences = await self.db.email_sequences.count_documents({"status": "completed"})
            
            # Performance globale
            pipeline = [
                {"$match": {"status": {"$in": ["completed", "active"]}}},
                {"$group": {
                    "_id": None,
                    "total_emails_sent": {"$sum": "$performance_metrics.emails_sent"},
                    "total_emails_opened": {"$sum": "$performance_metrics.emails_opened"},
                    "total_responses": {"$sum": "$performance_metrics.responses_received"},
                    "total_conversions": {"$sum": {"$cond": ["$performance_metrics.conversion_achieved", 1, 0]}}
                }}
            ]
            
            performance_data = await self.db.email_sequences.aggregate(pipeline).to_list(length=1)
            performance = performance_data[0] if performance_data else {}
            
            # R√©partition par type
            type_breakdown = await self.db.email_sequences.aggregate([
                {"$group": {"_id": "$sequence_type", "count": {"$sum": 1}}},
                {"$sort": {"count": -1}}
            ]).to_list(length=None)
            
            return {
                "total_sequences": total_sequences,
                "active_sequences": active_sequences,
                "completed_sequences": completed_sequences,
                "performance": {
                    "emails_sent": performance.get("total_emails_sent", 0),
                    "open_rate": (performance.get("total_emails_opened", 0) / max(performance.get("total_emails_sent", 1), 1)) * 100,
                    "response_rate": (performance.get("total_responses", 0) / max(performance.get("total_emails_sent", 1), 1)) * 100,
                    "conversion_rate": (performance.get("total_conversions", 0) / max(total_sequences, 1)) * 100
                },
                "by_type": type_breakdown,
                "generated_at": datetime.now().isoformat()
            }
            
        except Exception as e:
            self.logger.error(f"Erreur stats s√©quences: {str(e)}")
            return {}
    
    async def get_lead_sequences(self, lead_id: str) -> List[Dict[str, Any]]:
        """R√©cup√®re toutes les s√©quences d'un lead"""
        
        try:
            sequences = await self.db.email_sequences.find(
                {"lead_id": lead_id}, 
                {"_id": 0}
            ).sort("started_at", -1).to_list(length=None)
            
            return sequences
            
        except Exception as e:
            self.logger.error(f"Erreur r√©cup√©ration s√©quences lead {lead_id}: {str(e)}")
            return []
    
    async def pause_sequence(self, sequence_id: str) -> Dict[str, Any]:
        """Met en pause une s√©quence"""
        
        try:
            await self.db.email_sequences.update_one(
                {"id": sequence_id, "status": "active"},
                {
                    "$set": {
                        "status": SequenceStatus.PAUSED.value,
                        "paused_at": datetime.now().isoformat()
                    }
                }
            )
            
            return {"status": "paused", "sequence_id": sequence_id}
            
        except Exception as e:
            self.logger.error(f"Erreur pause s√©quence {sequence_id}: {str(e)}")
            return {"status": "error", "error": str(e)}
    
    async def resume_sequence(self, sequence_id: str) -> Dict[str, Any]:
        """Reprend une s√©quence en pause"""
        
        try:
            await self.db.email_sequences.update_one(
                {"id": sequence_id, "status": "paused"},
                {
                    "$set": {
                        "status": SequenceStatus.ACTIVE.value,
                        "resumed_at": datetime.now().isoformat()
                    }
                }
            )
            
            return {"status": "resumed", "sequence_id": sequence_id}
            
        except Exception as e:
            self.logger.error(f"Erreur reprise s√©quence {sequence_id}: {str(e)}")
            return {"status": "error", "error": str(e)}

# Fonctions utilitaires
def get_sequence_service(db: AsyncIOMotorDatabase, 
                        email_service: EmailAutomationService,
                        ai_service: EnhancedBehavioralAI,
                        notification_service: NotificationService) -> IntelligentEmailSequenceService:
    """Factory pour cr√©er une instance du service de s√©quences"""
    return IntelligentEmailSequenceService(db, email_service, ai_service, notification_service)

# Configuration par d√©faut
DEFAULT_SEQUENCE_CONFIG = {
    "processing_interval_minutes": 15,  # Traiter les s√©quences toutes les 15 minutes
    "max_daily_emails_per_lead": 2,    # Maximum 2 emails par jour par lead
    "respect_business_hours": True,     # Respecter les heures ouvrables
    "business_hours": {
        "start": "09:00",
        "end": "18:00",
        "timezone": "Europe/Paris"
    },
    "auto_unsubscribe_after_days": 90,  # D√©sabonnement auto apr√®s 90 jours d'inactivit√©
    "ai_optimization_enabled": True     # Optimisation IA activ√©e par d√©faut
}